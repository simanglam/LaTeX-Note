local ran_ok,error=pcall(function()local ran_ok,kpse=pcall(require, "kpse")if ran_ok then kpse.set_program_name("luatex")end local lfs = require("lfs") local cacheDir = "./_markdown_LaTeX教學" if not lfs.isdir(cacheDir) then assert(lfs.mkdir(cacheDir)) end local md = require("markdown") local convert = md.new({cacheDir = "./_markdown_LaTeX教學", contentBlocksLanguageMap = "markdown-languages.json", debugExtensionsFileName = "./LaTeX教學.debug-extensions.json", frozenCacheFileName = "./_markdown_LaTeX教學/frozenCache.tex", blankBeforeBlockquote = false, blankBeforeCodeFence = false, blankBeforeHeading = false, breakableBlockquotes = false, citationNbsps = true, citations = false, codeSpans = true, contentBlocks = false, debugExtensions = false, definitionLists = false, eagerCache = true, extensions = {}, expectJekyllData = false, fancyLists = false, fencedCode = true, finalizeCache = false, footnotes = false, frozenCacheCounter = 30, hardLineBreaks = false, hashEnumerators = false, headerAttributes = false, html = false, hybrid = false, inlineFootnotes = false, jekyllData = false, pipeTables = true, preserveTabs = false, relativeReferences = false, shiftHeadings = 0, slice = "^ $", smartEllipses = false, startNumber = true, strikeThrough = true, stripIndent = false, subscripts = false, superscripts = false, tableCaptions = false, taskLists = false, texComments = false, tightLists = true, underscores = true, }) local file = assert(io.open("./LaTeX教學.markdown.in", "r"), [[Could not open file "./LaTeX教學.markdown.in" for reading]]) local input = assert(file:read("*a")) assert(file:close()) print(convert(input:gsub("\r\n?", "\n") .. "\n"))
end)if not ran_ok then local file=io.open("./LaTeX教學.markdown.err","w")if file then file:write(error.."\n")file:close()end print('\\begingroup\\ExplSyntaxOn\\msg_error:nnvv{luabridge}{failed-to-execute}{g_luabridge_output_dirname_str}{g_luabridge_error_output_filename_str}\\endgroup')end
